@page "/EditQuestionsPage/{gameID:int}/{userId:int}"
@using TreasureIsland_Dolev_May_Coral.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav


<h2><b style="color:saddlebrown">עריכת המשחק: </b><b style="color:black">@CurrentGame.GameName</b> </h2>

<EditForm Model="@CurrentQuestion" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudItem>
        <MudItem Style="width: 500px">
            <MudText Style="color: saddlebrown">השאלה:</MudText> <MudText Style="color:black; font-size:small"> 3-50 תווים</MudText>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="תוכן השאלה..." @bind-Value="CurrentQuestion.QuestionTitle" For="@(() => CurrentQuestion.QuestionTitle)" />
            <MudText Style="font-size:small">ניתן להוסיף</MudText>
            <MudButton EndIcon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" for="FileInputID" HtmlTag="label"></MudButton>
            <InputFile id="FileInputID" OnChange="UploadFile" accept=".jpg, .jpeg, .png" hidden />
            <img src="@CurrentQuestion.QuestionImage" width="30" />
        </MudItem>
        <MudItem Style="width: 300px">
            <MudText Style="color: saddlebrown"><b>תשובה נכונה</b></MudText>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="תוכן תשובה נכונה" HelperText="2-25 תווים"
                          @bind-Value="CurrentDistractor.DistractorContent" For="@(() => CurrentDistractor.DistractorContent)" />
        </MudItem>

        <MudText Style="color: saddlebrown"><b>תשובה לא נכונה</b></MudText>
        <MudItem Style="width: 300px">
            @foreach (Distractor a in myDistractorList)
            {
                <MudTextField @bind-Value="a.DistractorContent" Margin="Margin.Dense" Placeholder="תוכן תשובה לא נכונה" Label="תשובה לא נכונה" Variant="Variant.Outlined"></MudTextField>
            }
        </MudItem>

    </MudItem>
 <MudButton Style="background-color:saddlebrown; color:azure" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">שמירת שאלה</MudButton>
  

</EditForm>


<MudTable class="tableofQ" Items="@CurrentGame.GameQuestions" Hover="true">
    <HeaderContent>
        <MudTh>שאלה</MudTh>
        <MudTh>כמות תשובות</MudTh>
        <MudTh>עריכה</MudTh>
        <MudTh>מחיקה</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="שאלה"><MudTooltip Text="@context.QuestionTitle">@context.QuestionTitle</MudTooltip></MudTd>
        <MudTd DataLabel="כמות תשובות">@context.QuestionDistractors.Count</MudTd>
        <MudTd DataLabel="עריכה"><MudButton @onclick="() => EditQustionFunc(context.GameID)" EndIcon="@Icons.Material.Outlined.Edit"></MudButton></MudTd>
        <MudTd DataLabel="מחיקה"> <MudButton @onclick="() => DeleteQustionFunc(context)" EndIcon="@Icons.Material.Outlined.Delete"></MudButton></MudTd>
    </RowTemplate>
</MudTable>

<br/>
<p>@msg</p>

@code {

    [Parameter]
    public int userId { get; set; } // פרמטר יוזר

    [Parameter]
    public int gameID { get; set; }//פרמטר מספר מזהה משחק

    Game CurrentGame = new Game(); //מופע של המשחק הנוכחי

    Question CurrentQuestion = new Question(); // מופע של שאלה נוכחית

    List<Question> currentgameQuestions = new List<Question>(); // רשימת שאלות של המשחק הנוכחי

    Distractor CurrentDistractor = new Distractor(); // מסיח נוכחי

    Distractor CorrectAnswer = new Distractor();

    List<Distractor> myDistractorList = new List<Distractor>(); // רשימת מסיחים

    List<string> QTable = new List<string>();


    // חיווי למשתמש
    string msg = "";

    protected async override Task OnInitializedAsync()
    {
        CurrentGame.ID = gameID;

        var getResponse = await Http.GetAsync("api/Games/bygameID/" + CurrentGame.ID);


        if (getResponse.IsSuccessStatusCode == true)
        {

            // הכלה של פרטי הקריאה מהדטה בייס למופע של המשחק בעמוד זה
            CurrentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            currentgameQuestions = CurrentGame.GameQuestions;

            CurrentGame.GameName = CurrentGame.GameName;//כותרת שם המשחק

            // CurrentQuestion.QuestionDistractors = new List<Distractor>();
            for (int i = 0; i <=4; i++)
            {
                Distractor CurrentDistractor = new Distractor();
                myDistractorList.Add(CurrentDistractor);
            }


            msg = "קריאה הצליחה";

        }
        else
        {
            string error = getResponse.Content.ReadAsStringAsync().Result;
            if (error == "game not found" || error == "empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                msg = "התרחשה תקלת שרת";
            }

        }


    }


    //עריכת שאלה כפתור עריכה

    protected async Task EditQustionFunc(int QtoEditID)

    {

    }

    protected async Task DeleteQustionFunc(Question Qtodelet)
    {

    }

    string myFileImage;
    long maxFileSize = 4194304;
    string msg1;
    List<string> DeletedImages = new List<string>();
    List<string> DeletedImagesforans = new List<string>();

    //העלאת תמונה לגזע השאלה
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage = resizeUrl;
                    Console.WriteLine(resizeUrl);
                    CurrentQuestion.QuestionImage = myFileImage;

                }
            }
        }
    }

    protected async Task OnValidSubmit()
    {
        CorrectAnswer.IsCorrect = true;

        CurrentQuestion.QuestionDistractors.Add(CorrectAnswer); //הוספת התשובה הנכונה לרשימה

        CurrentQuestion.QuestionDistractors = myDistractorList; // הוספת המסיחים לרשימה


        var postRespone = await Http.PostAsJsonAsync("api/Games/editQuestion/" + userId + "/" + gameID, CurrentQuestion);

        if (postRespone.IsSuccessStatusCode == true)
        {
            Game updateGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;

            msg = "נשמר בהצלחה";

            var GetResponse = await Http.GetAsync("api/Games/bygameID/" + gameID);
            if (GetResponse.IsSuccessStatusCode == true)
            {
                CurrentGame = GetResponse.Content.ReadFromJsonAsync<Game>().Result;
            }
            else
            {
                string error = GetResponse.Content.ReadAsStringAsync().Result;
                if (error == "game not found" || error == "empty Session")
                {
                    nav.NavigateTo("./");
                }
                else
                {
                    msg = "התרחשה תקלת שרת";
                }
            }
        }

        else
        {
            msg = "לא בוצעו שינויים";
        }
        CurrentQuestion = new Question();
        myDistractorList = new List<Distractor>();
        CorrectAnswer = new Distractor();
        await OnInitializedAsync();
    }

    //העלאת תמונה למסיחי השאלה שגויים
    private async Task UploadFileForDistractors(InputFileChangeEventArgs e)
    {

    }


}