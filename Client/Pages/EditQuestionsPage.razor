@page "/EditQuestionsPage/{gameID:int}/{userId:int}"
@using TreasureIsland_Dolev_May_Coral.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService
@inject IDialogService Dialog

<header>
    <a>
        <img id="logo" src="photo/logo.png" />
        <p>אי המטמון</p>
    </a>
    <nav>
        <ul>
            <li><a @onclick="@(() => GotoOdot(MyDialogPop))">אודות</a></li>
            <li><a @onclick="@(() => GotoHowtoDialog(MyDialogPop))">איך משחקים?</a></li>
            <li><a class="about" href="../indextest.html">למשחק</a></li>

        </ul>
    </nav>
</header>

<div id="ImgWoodEditGame">
    <MudTooltip Text="המשחק שיצרת שמור">
        <MudText Class="cursor-pointer" Style="font-size:smaller; color:saddlebrown" @onclick="goToGamesPage">
            <MudIcon Size="Size.Small" Icon=@Icons.Filled.SubdirectoryArrowRight></MudIcon>חזרה לרשימת המשחקים
        </MudText>
    </MudTooltip>

    <div class="BtnPublish">
        @if (Qcount >= 10)
        { //גדול מ10 ניתן לפרסום
            <MudItem>
                <MudText Style="font-size:small; color:white;">לפרסום המשחק הנוכחי:</MudText>
                <MudButton Style="background-color:darkorange;height:26px;border-radius:30px; margin-top:1%;" Variant="Variant.Filled" OnClick="(() => PublishGame(MyDialogPublish))">פרסום משחק</MudButton>
            </MudItem>
            <MudItem Style="color:green">
                <MudText Style="font-size:small"> <MudIcon Size="Size.Small" Icon="@Icons.Filled.Info" />המשחק ניתן לפרסום</MudText>
            </MudItem>
        }
        else
        {
            @if (Qcount > 0)
            {
                //כפתור כבוי
                <MudItem>
                    <MudButton Style="background-color:darkorange; height: 26px;border-radius: 30px;" Variant="Variant.Filled" Disabled="true">פרסום משחק</MudButton>
                </MudItem>
                <MudItem Style="color:red;">
                    <MudText Style="font-size:small"> <MudIcon Size="Size.Small" Icon="@Icons.Filled.Info" />לא ניתן לפרסם את המשחק</MudText>
                </MudItem>
            }
            // else קטן מאפס כפתור מוסתר
        }
    </div>
</div>
<br />
<div id="ContentQuestion">

    <h1 style="color: saddlebrown">עריכת המשחק: <b style="color: black">@CurrentGame.GameName</b></h1>

    <EditForm Model="@CurrentQuestion" OnValidSubmit="OnValidSubmit">

        <DataAnnotationsValidator />
        <MudItem>
            <MudText Style="color: saddlebrown">
                השאלה:
                <MudText Style="color:black; font-size:small"> 3-50 תווים</MudText>
            </MudText>
            <MudItem Style="width: 550px">
                @if (CurrentQuestion.QuestionTitle == null || CurrentQuestion.QuestionTitle == "")
                {
                    <MudTextField Variant="Variant.Outlined"  Counter="50" Margin="Margin.Dense" Placeholder="תוכן השאלה..." @bind-Value="CurrentQuestion.QuestionTitle" For="@(() => CurrentQuestion.QuestionTitle)"></MudTextField>
                }
                else
                {

                    <MudTextField T="string"
                                  Counter="50"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Placeholder="תוכן השאלה..."
                                  @bind-Value="CurrentQuestion.QuestionTitle"
                                  For="@(() => CurrentQuestion.QuestionTitle)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Filled.Close"
                                  OnAdornmentClick="CleanFuncQuestion"></MudTextField>

                }

                <InputFile id="FileInputID" OnChange="UploadFile" accept=".jpg, .jpeg, .png" hidden />
                <img src="@CurrentQuestion.QuestionImage" class="img-qu" width="30" style="display: flow-root; margin-top: -13%;margin-right: 100%;" />
                <div class="imgUploadBtn">
                    @if (Xbuttonhidden2 == false)
                    {
                        <MudText Class="TextImfI" Style="font-size:small">ניתן להוסיף</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" for="FileInputID" HtmlTag="label"></MudIconButton>
                    }
                    else
                    {
                    if (CurrentQuestion.QuestionImage != null)
                    {
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" Color="Color.Dark" @onclick="(() => CleanFuncQuestionImage(CurrentQuestion.QuestionImage))" HtmlTag="label"></MudIconButton>
                    }
                    }

                </div>

            </MudItem>

            <div id="Distracting">
            <MudText Style="color:saddlebrown;font-weight: bold;">אפשרויות מענה: </MudText>
            <MudText Style="font-size:smaller;margin-inline: 9%;margin-top: -21px;">(@DistractorsonScreen מתוך 6)</MudText>

                <MudItem Style="width: 304px">

                    <MudText Style="color: forestgreen; font-size:medium"><b>תשובה נכונה</b></MudText>

                    <InputFile id="imgFileCorrectAnswer" OnChange="UploadFileforCorrectAnswer" accept=".jpg, .jpeg, .png" hidden />

                    @if (CorrectAnswer.IsImage == false)
                    {

                        @if (string.IsNullOrEmpty(CorrectAnswer.DistractorContent) == false)
                        {
                            // תיבת טקסט מלא
                            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Counter="30" MaxLength="30" Placeholder="תוכן תשובה נכונה"
                                          @bind-Value="CorrectAnswer.DistractorContent" For="@(() => CorrectAnswer.DistractorContent)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Close" OnAdornmentClick="CleanFuncDistractorCorrectImage" />

                            //כפתור העלאת תמונה מושבת
                            <MudTooltip Text="כדי להעלות תמונה עליך למחוק את הטקסט">
                                <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Disabled="true" Size="Size.Small" Color="Color.Dark" Style="margin-top: -38%; margin-right: 89%;" for="FileInputID" HtmlTag="label"></MudIconButton>
                            </MudTooltip>
                        }
                        else
                        {
                            //האם תיבת טקסט ריק אז אפשר להכניס תוכן לתיבה
                            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Counter="30" MaxLength="30" Placeholder="תוכן תשובה נכונה"
                                          @bind-Value="CorrectAnswer.DistractorContent" For="@(() => CorrectAnswer.DistractorContent)" />
                            //כפתור העלאת תמונה פעיל
                            <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" Style="margin-top: -36%; margin-right: 89%;" for="imgFileCorrectAnswer" HtmlTag="label"></MudIconButton>
                        }
                    }
                    else
                    {
                        //התוכן של המסיח הוא תמונה
                        //אז תיבת הטקסט אינה פעילה
                        //מוצג תוכן התמונה והכפתור
                        if (CorrectAnswer.IsImage == true)
                        {
                            <MudTooltip Text="כדי להוסיף טקסט עליך למחוק את התמונה">
                                <MudTextField Disabled="true" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="תוכן תשובה נכונה"
                                              For="@(() => CorrectAnswer.DistractorContent)" />
                            </MudTooltip>
                            <img src="@CorrectAnswer.DistractorContent" width="30" />
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" Color="Color.Dark" @onclick="CleanFuncDistractorCorrectImage" HtmlTag="label"></MudIconButton>
                        }
                        else
                        {
                            <MudTextField Class="imgIDis" Disabled="true" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="תוכן תשובה נכונה"
                                          For="@(() => CorrectAnswer.DistractorContent)" />
                            <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" for="imgFileCorrectAnswer" HtmlTag="label"></MudIconButton>
                        }

                    }

                </MudItem>

                <MudText Style="color: saddlebrown; font-size: medium"><b>תשובה לא נכונה</b></MudText>
                <MudItem Style="width: 304px">
                    @foreach (Distractor a in myDistractorList)
                    {

                        int place = myDistractorList.IndexOf(a);

                        <InputFile id="@("imgFile" + place.ToString())" OnChange="((e) => UploadFileDistractor(e, place))" accept=".jpg, .jpeg, .png" hidden />
                        <div class="distractor-@place" id="@place">
                            @if (a.IsImage == false)
                            {
                                //אם המסיח אינו מכיל תמונה אז...
                                @if (string.IsNullOrEmpty(a.DistractorContent) == false)
                                {
                                    //האם התוכן של המסיח הוא מלא אז....

                                    <MudTextField @bind-Value="a.DistractorContent"
                                                  Margin="Margin.Dense"
                                                  Counter="30"
                                                  MaxLength="30"
                                                  Label="תשובה לא נכונה"
                                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Close" OnAdornmentClick="(() => CleanFuncDistractorImage(place))"></MudTextField>

                                    // מוסיפים כפתור להעלאת תמונה במצב מושבת
                                    <MudTooltip Text="כדי להעלות תמונה עליך למחוק את הטקסט">
                                        <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Disabled="true" Size="Size.Small" Color="Color.Dark" for="FileInputID" HtmlTag="label"></MudIconButton>
                                    </MudTooltip>
                                }
                                else
                                {
                                    // מוסיפים כתפור תמונה שהוא כן פעיל
                                    <MudTextField @bind-Value="a.DistractorContent"
                                                  Margin="Margin.Dense"
                                                  Counter="30" MaxLength="30"
                                                  Placeholder="תוכן תשובה לא נכונה"
                                                  Variant="Variant.Outlined"></MudTextField>

                                    <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" for="@("imgFile" + place.ToString())" Style="margin-top: -33%; margin-right: 89%;" HtmlTag="label"></MudIconButton>

                                }
                            }
                            else
                            {
                                if (a.IsImage == true)
                                {

                                    //תיבת טקסט הינה מושבתת כי יש תמונה בתוכן של המסיח
                                    <MudTooltip Text="כדי להוסיף טקסט עליך למחוק את התמונה">
                                        <MudTextField Disabled="true" Placeholder="" Counter="30" MaxLength="30" Variant="Variant.Outlined" Margin="Margin.Dense" T="string"></MudTextField>
                                    </MudTooltip>
                                    <img src="@myDistractorList[place].DistractorContent" width="30" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" Color="Color.Dark" @onclick="(() => CleanFuncDistractorImage(place))" HtmlTag="label"></MudIconButton>
                                }
                                else
                                {
                                    //תיבת טקסט הינה מושבתת כי יש תמונה בתוכן של המסיח
                                    <MudTextField Disabled="true" Margin="Margin.Dense" Placeholder="" Variant="Variant.Outlined" T="string"></MudTextField>
                                    <MudIconButton Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Small" Color="Color.Dark" for="@("imgFile" + place.ToString())" HtmlTag="label"></MudIconButton>
                                }

                            }
                        </div>
                    }

                </MudItem>
            </div>
        </MudItem>

        @if (string.IsNullOrEmpty(CorrectAnswer.DistractorContent) == false && string.IsNullOrEmpty(myDistractorList[0].DistractorContent) == false && string.IsNullOrEmpty(CurrentQuestion.QuestionTitle) == false)
        {
            <MudButton Style="background-color: saddlebrown; color: azure; border-radius: 17px; margin-right: 15px; margin-top: -5%; z-index: 3;" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">שמירת שאלה</MudButton>
        }
        else
        {
            <MudTooltip Text="לא ניתן לשמור את השאלה. יש להוסיף שאלה בגזע השאלה ו-2 מסיחים.">
                <MudButton Style="background-color: saddlebrown; color: azure; border-radius: 17px; margin-right: 15px; margin-top: -40%; z-index: 3; " Disabled="true" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">שמירת שאלה</MudButton>
            </MudTooltip>
        }
    </EditForm>
</div>
<div id="TableEditinGame">
    <MudTable FixedHeader="true" Dense="true" style="height:614px; overflow-y: scroll;" class="tableofQ" Items="@CurrentGame.GameQuestions" Hover="true">
        <ToolBarContent>
            <MudText Style="color:black;" Typo="Typo.h6">מאגר שאלות (@CurrentGame.GameQuestions.Count)</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>שאלה</MudTh>
            <MudTh>כמות תשובות</MudTh>
            <MudTh>עריכה</MudTh>
            <MudTh>מחיקה</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="שאלה"><MudTooltip Text="@context.QuestionTitle">@context.QuestionTitle</MudTooltip></MudTd>
            <MudTd DataLabel="כמות תשובות">@context.QuestionDistractors.Count</MudTd>
            <MudTd DataLabel="עריכה"><MudIconButton @onclick="() => EditQustionFunc(context.ID)" Icon="@Icons.Material.Outlined.Edit"></MudIconButton></MudTd>
            <MudTd DataLabel="מחיקה"> <MudIconButton @onclick="() => DeleteQustionFunc(context,MyDialogDeleteQuestion)" Icon="@Icons.Material.Outlined.Delete"></MudIconButton></MudTd>
            <MudDivider />
        </RowTemplate>
    </MudTable>
</div>

<br />
<p>@msg</p>
@code {



    DialogOptions MyDialogPublish = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };
    async Task PublishGame(DialogOptions options) //פופאפ לפרסום משחק
    {

        var parameters = new DialogParameters();

        parameters.Add("GameFromPage", CurrentGame); //שולח מופע של משחק

        Console.WriteLine("לפני הפופאפ " + CurrentGame.IsPublish);
        var dialog = DialogService.Show<GameIsPublishedDialogAtEditPage>("פרסום המשחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {

            Console.WriteLine("המשחק פורסם, סגירת חלון והמשך עריכת שאלות");
        }
        else
        {

            Console.WriteLine("המשחק פורסם והמשתמש רוצה לשחק!");
            // nav.NavigateTo("");
        }


        Console.WriteLine("אחרי הפופאפ " + CurrentGame.IsPublish);

        //עדכון בקונטרולר

    }

    bool fixedheader = true;

    [Parameter]
    public int userId { get; set; } // פרמטר יוזר

    [Parameter]
    public int gameID { get; set; }//פרמטר מספר מזהה משחק

    Game CurrentGame = new Game(); //מופע של המשחק הנוכחי

    Question CurrentQuestion = new Question(); // מופע של שאלה נוכחית

    List<Question> currentgameQuestions = new List<Question>(); // רשימת שאלות של המשחק הנוכחי

    Distractor CurrentDistractor = new Distractor(); // מסיח נוכחי

    Distractor CorrectAnswer = new Distractor();

    List<Distractor> myDistractorList = new List<Distractor>(); // רשימת מסיחים

    List<string> QTable = new List<string>();

    int DistractorsonScreen = 0; //משתנה לספירת מסיחים על המסך לפני שמירה
    int Qcount = 0; // משתנה לספירת שאלות - תנאי לפרסום

    // חיווי למשתמש
    string msg = "";

    protected async override Task OnInitializedAsync() //טעינת נתונים בעמוד , קיראה לנתונים של המשחק
    {
        Xbuttonhidden2 = false; // איפוס משתנה איקס לתמונה בגזע השאלה

        CurrentGame.ID = gameID;

        var getResponse = await Http.GetAsync("api/Games/bygameID/" + CurrentGame.ID);


        if (getResponse.IsSuccessStatusCode == true)
        {

            // הכלה של פרטי הקריאה מהדטה בייס למופע של המשחק בעמוד זה
            CurrentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            currentgameQuestions = CurrentGame.GameQuestions;

            CurrentGame.GameName = CurrentGame.GameName;//כותרת שם המשחק

            CurrentQuestion.QuestionDistractors = new List<Distractor>(); // אתחול הרשימה

            for (int i = 0; i <= 4; i++)
            {
                Distractor CurrentDistractor = new Distractor();
                myDistractorList.Add(CurrentDistractor);
            }

            Console.WriteLine("קריאה הצליחה  OnInitializedAsync");

        }
        else
        {
            string error = getResponse.Content.ReadAsStringAsync().Result;
            if (error == "game not found")
            {

                nav.NavigateTo("./");
            }
            else
            {
                if (error == "empty Session")
                {
                    DialogOptions options = MyDialogSession;
                    var parameters = new DialogParameters();
                    parameters.Add("MudText", "לא הייתה פעילות במערבת במשך זמן רב, התחברו שנית");
                    var dialog = DialogService.Show<SessionDialog>("נותקת מהמערכת", parameters, options);
                }
                Console.WriteLine("התרחשה תקלת שרת");
            }

        }

        DistractorsonScreen = CurrentQuestion.QuestionDistractors.Count;
        Qcount = CurrentGame.GameQuestions.Count;
    }


    DialogOptions MyDialogSession = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };


    //עריכת שאלה כפתור עריכה
    bool EditQBool = false;

    protected async Task EditQustionFunc(int QtoEditID) // , שליפה בלחיצה על כפתור עריכת  שאלה

    {

        //איפוס
        myDistractorList = new List<Distractor>();

        for (int i = 0; i <= 4; i++)
        {
            Distractor CurrentDistractor = new Distractor();
            myDistractorList.Add(CurrentDistractor);
        }

        //CurrentQuestion.QuestionDistractors = new List<Distractor>(); // אתחול הרשימה
        CorrectAnswer = new Distractor();


        //נקרא לקונטרולר ונבקש את התוכן מהשאלה כולל מסיחים
        var GetResponse = await Http.GetAsync("api/Questions/editQ/" + QtoEditID);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            //נכניס את השאלה שהתקבלה מהבסיס נתונים למופע של השאלה
            CurrentQuestion = GetResponse.Content.ReadFromJsonAsync<Question>().Result;


            if (CurrentQuestion.QuestionImage != null)
            {
                Xbuttonhidden2 = true;
            }

            foreach (Distractor a in CurrentQuestion.QuestionDistractors)
            {
                int index = CurrentQuestion.QuestionDistractors.IndexOf(a);

                if (a.IsCorrect == true)
                {
                    CorrectAnswer = a;
                }
                else
                {
                    myDistractorList[index - 1] = CurrentQuestion.QuestionDistractors[index];

                }

            }

            DistractorsonScreen = CurrentQuestion.QuestionDistractors.Count;
            Console.WriteLine("השאלה נשלפה בהצלחה");
            //EditQBool = true;
            StateHasChanged();

        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            Console.WriteLine(error);

        }

    }

    DialogOptions MyDialogDeleteQuestion = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    protected async Task DeleteQustionFunc(Question Qtodelet, DialogOptions options) //פופאם למחיקת שאלה
    {
        //בדיקה האם מספר השאלות במשחק עומד בתנאי לפרסום
        int Qnumber = CurrentGame.GameQuestions.Count;

        if (Qnumber == 10)
        { //אם מספר השאלות כרגע הוא 10 אז תציג הודעה לגבי פרסום משחק
            var parameters = new DialogParameters();
            parameters.Add("QtoDialog", Qtodelet); //שולח מופע של משחק
            var dialog = DialogService.Show<DeleteQWarning>("מחיקת שאלה", parameters, options);

            var result = await dialog.Result;
            if (result.Cancelled == false)
            {
                CurrentQuestion = Qtodelet;
                if (CurrentQuestion.QuestionImage != null)
                {
                    DeletedImages.Add(CurrentQuestion.QuestionImage); //הוספה לרשימת המחיקה                       
                    Console.WriteLine("QuestionImage " + DeletedImages.Count);

                }
                foreach (Distractor d in CurrentQuestion.QuestionDistractors)
                {
                    if (d.IsImage == true)
                    {
                        DeletedImages.Add(d.DistractorContent); //הוספה לרשימת המחיקה                       
                    }

                }

                Console.WriteLine("DeletedImages.Count " + DeletedImages.Count);

                //פעולת המחיקה
                if (DeletedImages.Count > 0)
                {
                    await DeleteImages();

                }
                var deleteRespone = await Http.DeleteAsync("api/Games/DeleteQ/" + CurrentGame.UserID.ToString() + "/" + Qtodelet.ID);
                if (deleteRespone.IsSuccessStatusCode == true)
                {
                    Console.WriteLine("שאלה נמחקה");
                    CurrentGame.GameQuestions.Remove(Qtodelet);

                    CurrentGame.IsPublish = false;

                    var postRespone = await Http.PostAsJsonAsync("api/Games/Update/Publish", CurrentGame);
                    if (postRespone.IsSuccessStatusCode == true)
                    {
                        var GetResponse = await Http.GetAsync("api/Games/" + userId);
                        if (GetResponse.IsSuccessStatusCode == true)
                        {

                            Game updateGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;
                            Console.WriteLine("פרסום בוטל ");

                        }

                    }
                }
                else
                {
                    string error = deleteRespone.Content.ReadAsStringAsync().Result;
                    Console.WriteLine(error);

                }

                //בסגירת הפופאפ שהשאלה תתאפס
                CurrentQuestion = new Question();
                myDistractorList = new List<Distractor>();
                CorrectAnswer = new Distractor();
                await OnInitializedAsync();
            }
        }
        else
        { //אם מספר השאלות כרגע הוא לא עשר אז תמחוק שאלה פופ אפ רגיל
            var dialog = DialogService.Show<DeleteQDialog>("מחיקת שאלה", options);

            var result = await dialog.Result;

            if (result.Cancelled == false)
            {
                CurrentQuestion = Qtodelet;
                if (CurrentQuestion.QuestionImage != null)
                {
                    DeletedImages.Add(CurrentQuestion.QuestionImage); //הוספה לרשימת המחיקה                       

                }
                foreach (Distractor d in CurrentQuestion.QuestionDistractors)
                {
                    if (d.IsImage == true)
                    {
                        DeletedImages.Add(d.DistractorContent); //הוספה לרשימת המחיקה                       
                    }

                }


                //פעולת המחיקה
                if (DeletedImages.Count > 0)
                {
                    await DeleteImages();

                }

                var deleteRespone = await Http.DeleteAsync("api/Games/DeleteQ/" + CurrentGame.UserID.ToString() + "/" + Qtodelet.ID);
                if (deleteRespone.IsSuccessStatusCode == true)
                {
                    Console.WriteLine("שאלה נמחקה");
                    CurrentGame.GameQuestions.Remove(Qtodelet);
                    Console.WriteLine("הרשימה התעדכנה");
                }
                else
                {
                    string error = deleteRespone.Content.ReadAsStringAsync().Result;
                    Console.WriteLine(error);

                }

                //בסגירת הפופאפ שהשאלה תתאפס
                CurrentQuestion = new Question();
                myDistractorList = new List<Distractor>();
                CorrectAnswer = new Distractor();
                await OnInitializedAsync();
            }
        }
    }

    string myFileImage;
    long maxFileSize = 4194304;
    string msg1;

    //רשימה מקומית לשמירה התמונות לפני שעושים פעולה של שליחה לשרת
    List<string> DeletedImages = new List<string>();

    List<string> DeletedImagesforans = new List<string>();

    //העלאת תמונה לגזע השאלה
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        Xbuttonhidden2 = true;

        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage = resizeUrl;
                    Console.WriteLine(resizeUrl);
                    CurrentQuestion.QuestionImage = myFileImage;

                }
            }
        }
    }


    string myFileImageCorrectAnswer;

    //פונקציה העלאת תמונה למסיח נכון
    private async Task UploadFileforCorrectAnswer(InputFileChangeEventArgs e)
    {

        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImageCorrectAnswer = resizeUrl;
                    Console.WriteLine(resizeUrl);
                    CorrectAnswer.DistractorContent = myFileImageCorrectAnswer;
                    CorrectAnswer.IsImage = true;
                }
            }
        }

    }

    string myFileImageWorngAnswer;

    private async Task UploadFileDistractor(InputFileChangeEventArgs e, int Place)     //העלאת תמונה למסיחים השגויים

    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImageWorngAnswer = resizeUrl;
                    Console.WriteLine(resizeUrl);
                    myDistractorList[Place].DistractorContent = myFileImageWorngAnswer;
                    myDistractorList[Place].IsImage = true;
                }
            }
        }

    }

    // פונקציה שמופעלת בלחיצה על שמירת שאלה
    protected async Task OnValidSubmit()
    {
        CurrentQuestion.QuestionDistractors = new List<Distractor>();

        Console.WriteLine("CurrentQuestion.QuestionDistractors.count " + CurrentQuestion.QuestionDistractors.Count);

        CorrectAnswer.IsCorrect = true;
        CorrectAnswer.QuestionID = CurrentQuestion.ID;
        CurrentQuestion.QuestionDistractors.Add(CorrectAnswer); //הוספת התשובה הנכונה לרשימה

        foreach (Distractor d in myDistractorList)
        {

            if (string.IsNullOrEmpty(d.DistractorContent) == false)
            { //תנאי שבודק האם המסיח ריק ורק אז מכניס את המסיח לרישמה
                d.QuestionID = CurrentQuestion.ID;
                CurrentQuestion.QuestionDistractors.Add(d); //בלולאה הוספת המסיחים לרשימה
            }

        }

        Console.WriteLine("CurrentQuestion.QuestionDistractors.count " + CurrentQuestion.QuestionDistractors.Count);
        Console.WriteLine("myDistractorList.Count" + myDistractorList.Count);

        var postRespone = await Http.PostAsJsonAsync("api/Games/editQuestion/" + userId + "/" + gameID, CurrentQuestion);

        if (postRespone.IsSuccessStatusCode == true)
        {

            Question updateQuestion = postRespone.Content.ReadFromJsonAsync<Question>().Result;
            Console.WriteLine(" updateQuestion" + updateQuestion.QuestionDistractors.Count);


            var GetResponse = await Http.GetAsync("api/Games/bygameID/" + gameID);
            if (GetResponse.IsSuccessStatusCode == true)
            {
                CurrentGame = GetResponse.Content.ReadFromJsonAsync<Game>().Result;
                Console.WriteLine(" OnValidSubmit קריאה שניה של משחק לפי ID");
                // לעדכן טבלה
            }
            else
            {

                string error = GetResponse.Content.ReadAsStringAsync().Result;
                if (error == "game not found" || error == "empty Session")
                {
                    nav.NavigateTo("./");
                }
                else
                {
                    Console.WriteLine(" OnValidSubmit תקלה בשמירת השאלה ");

                    Console.WriteLine(error);
                }
            }
        }
        else
        {

            Console.WriteLine("api/Games/editQuestion/OnValidSubmit תקלה בשמירת השאלה ");


        }

        // מחיקת התמונות המיותרות שנמחקו
        if (DeletedImages.Count>0) {
            await DeleteImages();

        }


        // EditQBool = false;
        CurrentQuestion = new Question();
        myDistractorList = new List<Distractor>();
        CorrectAnswer = new Distractor();

        await OnInitializedAsync();
    }


    bool Xbuttonhidden1;
    bool Xbuttonhidden2;

    //פונקציה למחיקת תוכן השאלה דרך תיבת טקסט
    void CleanFuncQuestion()
    {
        CurrentQuestion.QuestionTitle = "";
        Xbuttonhidden1 = false;
        StateHasChanged();

    }



    //פונקצית מחיקת תמונה
    private async Task DeleteImages()
    {

        var saveResponse = await Http.PostAsJsonAsync("api/Games/deleteImages", DeletedImages);

        //פעולת המחיקה
        if (saveResponse.IsSuccessStatusCode == true)
        {
            Console.WriteLine(" נמחקה בהצלחה");
            //myFileImage = "";
        }

        DeletedImages= new List<string>(); //איפוס

    }

    void CleanFuncQuestionImage(string myFileImage) // פונקציה למחיקת תמונה בגזע השאלה
    {
        DeletedImages.Add(myFileImage); //הוספה לרשימת המחיקה
        Console.WriteLine(" myFileImage" + myFileImage);

        CurrentQuestion.QuestionImage = null;
        Xbuttonhidden2 = false;
        myFileImage = "";

        StateHasChanged();

    }

    void CleanFuncDistractorCorrectImage() // פונקציה למחיקת תמונה במסיח הנכון
    {
        DeletedImages.Add(myFileImageCorrectAnswer); //הוספה לרשימת המחיקה
        CorrectAnswer.DistractorContent = "";
        CorrectAnswer.IsImage = false;
        StateHasChanged();

    }

    void CleanFuncDistractorImage(int Place) // פונקציה למחיקת תמונה במסיחים
    {
        myFileImageWorngAnswer = myDistractorList[Place].DistractorContent;
        DeletedImages.Add(myFileImageWorngAnswer); //הוספה לרשימת המחיקה

        myDistractorList[Place].DistractorContent = "";
        myDistractorList[Place].IsImage = false;

        StateHasChanged();

    }

    //פונקציה חזרה לעמוד המשחקים שלי בלחיצה על חזרה לרשימת משחקים
    void goToGamesPage()
    {
        nav.NavigateTo("./Games/" + userId);
    }

    DialogOptions MyDialogPop = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };


    void GotoHowtoDialog(DialogOptions options) // פופאפ לתפריט ניווט איך משחקים
    {
        Console.WriteLine("נכנס לפונקציה");
        Console.WriteLine("options " + options);
        var dialog = DialogService.Show<HowtoplayDialog>(" ", options);

        //var result = await dialog.Result;
    }

    void GotoOdot(DialogOptions options) //פופאפ לאודות
    {
        Console.WriteLine("נכנס לפונקציה");
        Console.WriteLine("options " + options);
        var dialog = DialogService.Show<Odot>(" ", options);

        //var result = await dialog.Result;
    }
}
