@page "/Games/{userId:int}"
@using TreasureIsland_Dolev_May_Coral.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject IDialogService Dialog

<h1 style="color:saddlebrown; text-align:center"><b>המשחקים שלי</b></h1>
<br />

<MudItem>
    <MudButton EndIcon="@Icons.Material.Outlined.Add" Style="background-color:saddlebrown; color:azure" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="@(() => OpenDialogCreateGAme(userId,MyDialog))">יצירת משחק חדש</MudButton>
</MudItem>

<br />

<MudTable Items="@CurrentUser.UserGames" Hover="true">
    <HeaderContent>

        <MudTh>שם המשחק</MudTh>
        <MudTh>לצפייה</MudTh>
        <MudTh>קוד משחק</MudTh>
        <MudTh>מספר שאלות</MudTh>
        <MudTh><MudTooltip Text="בהגדרות ניתן לשנות את שם המשחק וזמן מענה לשאלה">הגדרות משחק<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
        <MudTh><MudTooltip Text="בעריכה ניתן לערוך את השאלה ואפשרויות המענה">עריכה<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
        <MudTh>מחיקה</MudTh>
        <MudTh><MudTooltip Text="נדרשות מינימום 10 שאלות לפרסום המשחק">פרסום<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="שם המשחק">@context.GameName</MudTd>
        <MudTd DataLabel="לצפייה"><MudButton EndIcon="@Icons.Material.Outlined.RemoveRedEye"></MudButton></MudTd>
        <MudTd DataLabel="קוד המשחק">@context.GameCode</MudTd>
        <MudTd DataLabel="מספר שאלות">@context.GameQuestions.Count</MudTd>
        <MudTd DataLabel="הגדרות משחק"><MudButton Color="Color.Info" OnClick="@(() => OpenDialogSettings(context.ID,maxWidth))" EndIcon="@Icons.Material.Outlined.Settings"></MudButton></MudTd>
        <MudTd DataLabel="עריכה"><MudButton Color="Color.Info" OnClick="@(()=>GotoEditPage(context))" EndIcon="@Icons.Material.Outlined.Edit"></MudButton></MudTd>
        <MudTd DataLabel="מחיקה"><MudButton Color="Color.Info" OnClick="@(() => DeleteGame(context))" EndIcon="@Icons.Material.Outlined.Delete"></MudButton></MudTd>
        <MudTd DataLabel="פרסום">
            <MudCheckBox CheckedChanged="@((bool newState) => PublishGame(context))" Checked="@context.IsPublish" Color="Color.Primary"></MudCheckBox>
        </MudTd>
    </RowTemplate>
</MudTable>

<p>@msg</p>


@code {

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    async Task OpenDialogSettings(int gameID, DialogOptions options)
    {
        Game GametoUpdateinDialog = CurrentUser.UserGames.FirstOrDefault(q => q.ID == gameID);//שולפת את המשחק מתוך הטבלה

        Game game = new Game();
        game.GameName = GametoUpdateinDialog.GameName;
        game.QTimeLimit = GametoUpdateinDialog.QTimeLimit;

        var parameters = new DialogParameters();

        // GametoUpdate = game;

        parameters.Add("GameFromPage", GametoUpdateinDialog); //שולח את המשחק

        var dialog = DialogService.Show<SttingGameDialog>("הגדרות משחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            //המשתמש לחץ על שמירת שינויים אז נעדכן את הבסיס נתונים

            Console.WriteLine("יש לשמור שינויים");

            var GetResponse = await Http.GetAsync("api/Games/" + userId);
            if (GetResponse.IsSuccessStatusCode == true)
            {
                var postRespone = await Http.PostAsJsonAsync("api/Games/Update/GameUpdate", GametoUpdateinDialog);

                if (postRespone.IsSuccessStatusCode == true)
                {
                    GametoUpdateinDialog = postRespone.Content.ReadFromJsonAsync<Game>().Result;
                    GametoUpdateinDialog = new Game();
                }
                else
                {
                    //שליחת ההודעה מהקומפוננטה לדף
                    Console.WriteLine(" לא בוצעו שינויים קריאה שגויה");
                }
            }
        }
        else
        {
            GametoUpdateinDialog.GameName = game.GameName;
            GametoUpdateinDialog.QTimeLimit = game.QTimeLimit;

            Console.WriteLine(" לא בוצעו שינויים החלון נסגר");
        }
        GametoUpdateinDialog = new Game(); //איפוס המופע
        game = new Game(); //איפוע המופע המקומי
    }

    DialogOptions MyDialog = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    async Task OpenDialogCreateGAme(int userId, DialogOptions options)
    {
        var parameters = new DialogParameters();

        // GametoUpdate = game;

        parameters.Add("userId", userId); //שולח המשתמש

        var dialog = DialogService.Show<CreateGameDialog>("הגדרות משחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            Console.WriteLine("התבצעו שינויים");
            await RefreshTable(); //רענון הטבלה

        }
        else
        {
            Console.WriteLine("לא היו שינויים סגירת חלון ");

        }
        newGame = new Game(); // המופעאיפוס

    }

    [Parameter]
    public int userId { get; set; }


    //משתנה לשינוי מצב הכפתור של צור משחק
    bool IsButtonEabled = true;

    // חיווי למשתמש
    string msg = "";

    //יצירת מופע חדש של יוזר
    User CurrentUser = new User();

    //יצירת מופע חדש של משחק
    Game newGame = new Game();

    Game GametoUpdate = new Game();


    //קריאה למאגר נותנים הצגת המשחקים של היוזר
    protected async override Task OnInitializedAsync()
    {
        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not login" || error == "empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                msg = "התרחשה תקלת שרת";
            }
        }

    }



    //קריאה לקונטרולר לעדכון סטטוס המשחק האם פורסם

    async Task PublishGame(Game selectedGame)

    {

        selectedGame.IsPublish = !selectedGame.IsPublish;

        Console.WriteLine("המשחק פורסם / לא פורסם");

        var postRespone = await Http.PostAsJsonAsync("api/Games/Update/Publish", selectedGame);
        if (postRespone.IsSuccessStatusCode == true)
        {
            var GetResponse = await Http.GetAsync("api/Games/" + userId);
            if (GetResponse.IsSuccessStatusCode == true)
            {

                Game updateGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;

                selectedGame = new Game();
            }

            else
            {
                msg = "משחק לא פורסם";
            }
        }

    }





    //קריאה לרענון הטבלה
    async Task RefreshTable()
    {

        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not login" || error == "empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                msg = "התרחשה תקלת שרת";
            }
        }
    }

    protected async Task DeleteGame(Game Game) //שיטה למחיקת משחק

    {
        newGame = Game;

        var deleteResponse = await Http.DeleteAsync("api/Games/" + newGame.UserID.ToString() + "/" + newGame.ID); //הנתיב של הקונטרולר מוצא לנו את המשחק שהמספר המזהה שלו נבחר או הוקלד

        if (deleteResponse.IsSuccessStatusCode == true) //בדיקת תקינות
        {
            var GetResponse = await Http.GetAsync("api/Games/" + userId);
            if (GetResponse.IsSuccessStatusCode == true)
            {


                CurrentUser.UserGames.Remove(newGame);  //להסיר את המשחק

                await RefreshTable(); // ריענון הטבלה

                newGame = new Game();// איפוס המופע כדי להכינו לקבלת מידע חדש
                msg = "אחרי המחיקה";

            }
            else
            {
                msg = "לא נמחק";
            }
        }
    }

    //מעבר לעמוד עריכת משחק דרך כפתור עריכה
    protected async Task GotoEditPage(Game Game)
    {
        var gameId = Game.ID;
        var getResponse = await Http.GetAsync("api/Games/bygameID/" + gameId);

        if (getResponse.IsSuccessStatusCode)
        {
            Game gametoEditPage = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            nav.NavigateTo("./EditQuestionsPage/" + gametoEditPage.ID + "/" + gametoEditPage.UserID);
        }
        else
        {
            msg = "התרחשה תקלת שרת";
        }


    }
}


