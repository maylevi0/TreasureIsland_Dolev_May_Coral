@page "/Games/{userId:int}"
@using TreasureIsland_Dolev_May_Coral.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav
@using System.ComponentModel.DataAnnotations

<h1 style="color:saddlebrown; text-align:center"><b>המשחקים שלי</b></h1>
<br />

<MudItem>
    <MudButton EndIcon="@Icons.Material.Outlined.Add" Style="background-color:saddlebrown; color:azure" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="showComponent">יצירת משחק חדש</MudButton>
</MudItem>


<br />
<br />
@if (status == true)

{

    <EditForm Model="@newGame" OnValidSubmit="OnValidSubmit">

        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem Style="width: 400px; height:300px">
                <MudCard>
                    <MudCardContent>
                        <MudText Style="color: saddlebrown">יצירת משחק חדש</MudText>
                        <MudIconButton Style="align-items:end" @onclick="showComponent" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                        <MudTextField Placeholder="הקלד שם למשחק..." Label="שם משחק" HelperText="2-25 תווים" @onkeydown="statusButton" @onkeyup="statusButton"
                                      @bind-Value="newGame.GameName" For="@(() => newGame.GameName)" />

                        <MudSelect T="int" Label="זמן מענה לשאלה" @bind-Value="newGame.QTimeLimit" For="@(() => newGame.QTimeLimit)" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem T="int" Value="20">20 שניות</MudSelectItem>
                            <MudSelectItem T="int" Value="30">30 שניות</MudSelectItem>
                            <MudSelectItem T="int" Value="40">40 שניות</MudSelectItem>
                            <MudSelectItem T="int" Value="50">50 שניות</MudSelectItem>
                            <MudSelectItem T="int" Value="60">60 שניות</MudSelectItem>
                        </MudSelect>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Style="background-color:saddlebrown; color:azure" ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="IsButtonEabled" Variant="Variant.Filled">צור משחק</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>

        </MudGrid>
    </EditForm>

}

@if (hideComp == true)
{
    <TreasureIsland_Dolev_May_Coral.Client.wwwroot.components.EditGameCompPopup GameIDFromPage="GametoUpdate" MessegeToPageEC="ActionComp">

    </TreasureIsland_Dolev_May_Coral.Client.wwwroot.components.EditGameCompPopup>
       
    
}

<MudTable Items="@CurrentUser.UserGames" Hover="true">
    <HeaderContent>

        <MudTh>שם המשחק</MudTh>
        <MudTh>לצפייה</MudTh>
        <MudTh>קוד משחק</MudTh>
        <MudTh>מספר שאלות</MudTh>
        <MudTh><MudTooltip Text="בהגדרות ניתן לשנות את שם המשחק וזמן מענה לשאלה">הגדרות משחק<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
        <MudTh><MudTooltip Text="בעריכה ניתן לערוך את השאלה ואפשרויות המענה">עריכה<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
        <MudTh>מחיקה</MudTh>
        <MudTh><MudTooltip Text="נדרשות מינימום 10 שאלות לפרסום המשחק">פרסום<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="שם המשחק">@context.GameName</MudTd>
        <MudTd DataLabel="לצפייה"><MudButton EndIcon="@Icons.Material.Outlined.RemoveRedEye"></MudButton></MudTd>
        <MudTd DataLabel="קוד המשחק">@context.GameCode</MudTd>
        <MudTd DataLabel="מספר שאלות">@context.GameQuestions.Count</MudTd>
        <MudTd DataLabel="הגדרות משחק"><MudButton Color="Color.Info" EndIcon="@Icons.Material.Outlined.Settings"></MudButton></MudTd>
        <MudTd DataLabel="עריכה"><MudButton Color="Color.Info" OnClick="@(() => show2Component(context.ID))" EndIcon="@Icons.Material.Outlined.Edit"></MudButton></MudTd>
        <MudTd DataLabel="מחיקה"><MudButton Color="Color.Primary" OnClick="@(() => DeleteGame(context.ID))" EndIcon="@Icons.Material.Outlined.Delete"></MudButton></MudTd>
        <MudTd DataLabel="פרסום">
            <MudCheckBox CheckedChanged="@((bool newState) => PublishGame(context))" Checked="@context.IsPublish" Color="Color.Primary"></MudCheckBox>
        </MudTd>
    </RowTemplate>
</MudTable>


<p>@msg</p>


@code {


    [Parameter]
    public int userId { get; set; }


    //משתנה לשינוי מצב הכפתור של צור משחק
    bool IsButtonEabled = true;

    // חיווי למשתמש
    string msg = "";

    //יצירת מופע חדש של יוזר
    User CurrentUser = new User();

    //יצירת מופע חדש של משחק
    Game newGame = new Game();

    Game GametoUpdate = new Game();


    //מצב מוסתר של קומפוננטה שינוי הגדרות משחק
    bool hideComp = false;
    // הופך את הקומפוננטה לנראה ממצב מוסתר
    public void show2Component(int gameID)
    {

        GametoUpdate.ID = gameID;

        if (hideComp == false)
        {

            hideComp = true;

        }

    }

    //חיוי מהקומפוננטה שינוי הגדרות משחק
    async Task ActionComp(string TextFromComp)
    {
        hideComp = true;
        msg = TextFromComp;
        await RefreshTable();
        if (TextFromComp== "הגדרות שונו בהצלחה")
        {
            hideComp = false;
        }
    }



    //מצב מוסתר של טופס צור משחק
    bool status = false;
    // הופך את הטופס לנראה ממצב מוסתר
    public void showComponent()
    {
        if (status == false)
        {
            status = true;

        }
        else
        {
            status = false;
        }


    }



    //קריאה למאגר נותנים הצגת המשחקים של היוזר
    protected async override Task OnInitializedAsync()
    {
        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not login" || error == "empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                msg = "התרחשה תקלת שרת";
            }
        }

    }



    //קריאה לקונטרולר לעדכון סטטוס המשחק האם פורסם

    async Task PublishGame(Game selectedGame)
    {
        selectedGame.IsPublish = !selectedGame.IsPublish;

        Console.WriteLine("המשחק פורסם / לא פורסם");

        var postRespone = await Http.PostAsJsonAsync("api/Games/Update/Publish", selectedGame);
        if (postRespone.IsSuccessStatusCode == true)
        {
            Game updateGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;

            selectedGame = new Game();
        }
        else
        {
            msg = "משחק לא פורסם";
        }


    }

    void statusButton()
    {
        StateHasChanged();
        if (string.IsNullOrEmpty(newGame.GameName) == false)
        {

            IsButtonEabled = true;
            StateHasChanged();

        }
        else
        {

            IsButtonEabled = false;
            StateHasChanged();

        }

    }

    // כפתור צור משחק- בלחיצה על כפתור של הטופס צריך להפעיל קריאה למאגר נתונים
    protected async Task OnValidSubmit()
    {



        //   מאפיינים של מודל משחק חדש צריכים להיות מאוכלסים
        newGame.UserID = userId;
        // newGame.IsPublish = false;
        //newGame.GameCode =;

        //ואז קריאה לקונטרולר והוספת משחק

        var postRespone = await Http.PostAsJsonAsync("api/Games/", newGame);
        if (postRespone.IsSuccessStatusCode == true)
        {
            Game AddGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;


            //איפוס המופע לאפשר יצירת מופע חדש
            newGame = new Game();

            msg = " נוצר משחק";

            // CurrentUser = new User();

            await RefreshTable();


        }
        else
        {
            msg = "לא נוצר משחק";

        }
    }

    //קריאה לרענון הטבלה
    async Task RefreshTable()
    {

        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not login" || error == "empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                msg = "התרחשה תקלת שרת";
            }
        }
    }

    protected async Task DeleteGame(int gameID) //שיטה למחיקת משחק

    {
        newGame.ID = gameID;

        var deleteResponse = await Http.DeleteAsync("api/Games/" + newGame.ID); //הנתיב של הקונטרולר מוצא לנו את המשחק שהמספר המזהה שלו נבחר או הוקלד

        if (deleteResponse.IsSuccessStatusCode == true) //בדיקת תקינות
        {


            msg = "קריאה הצליחה אבל לא נמחק";
            CurrentUser.UserGames.Remove(newGame);  //להסיר את המשחק

            await RefreshTable(); // ריענון הטבלה

            newGame = new Game();// איפוס המופע כדי להכינו לקבלת מידע חדש
            msg = "אחרי המחיקה";

        }
        else
        {
            msg = "לא נמחק";
        }
    }

}


