@page "/Games/{userId:int}"
@using TreasureIsland_Dolev_May_Coral.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject IDialogService Dialog


<header>
    <a>
        <img id="logo" src="photo/logo.png" />
        <p>אי המטמון</p>
    </a>
    <nav>
        <ul>
            <li><a @onclick="@(() => GotoOdot(MyDialogPopup))">אודות</a></li>
            <li><a @onclick="@(() => GotoHowtoDialog(MyDialogPopup))">איך משחקים?</a></li>
            <li><a class="about" href="../indextest.html">למשחק</a></li>

        </ul>
    </nav>
</header>


<div id="GameSign">
    <h1> רשימת המשחקים שלי  </h1>
</div>

<MudText style="color:saddlebrown; text-align:center">סה"כ משחקים: @CurrentUseUserGames</MudText>
<MudButton Style="background-color:saddlebrown; color:white; border-radius:20px;margin-right: 34px;" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="@(() => OpenDialogCreateGAme(userId,MyDialog))">+ יצירת משחק חדש</MudButton>

<br />
<div id="GameTable">
    <MudTable Items="@CurrentUser.UserGames" Hover="true" Dense="true" FixedHeader="true" NoRecordsContent="null">
        <HeaderContent>

            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;">שם המשחק</MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;">לצפייה</MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;">קוד משחק</MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;">מספר שאלות</MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;"><MudTooltip Text="בהגדרות ניתן לשנות את שם המשחק וזמן מענה לשאלה">הגדרות משחק<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;"><MudTooltip Text="בעריכה ניתן לערוך את השאלה ואפשרויות המענה">עריכה<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;">מחיקה</MudTh>
            <MudTh style="line-height: 1.5rem;background-color: #DBCBAA;font-weight: bold;"><MudTooltip Text="נדרשות מינימום 10 שאלות לפרסום המשחק">פרסום<MudIcon Icon="@Icons.Filled.Info"></MudIcon></MudTooltip></MudTh>

        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="שם המשחק">@context.GameName</MudTd>
            <MudTd DataLabel="לצפייה"><MudButton EndIcon="@Icons.Material.Outlined.RemoveRedEye" Style="color:#714727;"></MudButton></MudTd>
            <MudTd DataLabel="קוד המשחק">@context.GameCode</MudTd>
            <MudTd DataLabel="מספר שאלות">@context.GameQuestions.Count</MudTd>
            <MudTd DataLabel="הגדרות משחק"><MudButton Color="Color.Info" OnClick="@(() => OpenDialogSettings(context.ID, maxWidth))" EndIcon="@Icons.Material.Outlined.Settings" Style="color:#714727;"></MudButton></MudTd>
            <MudTd DataLabel="עריכה"><MudButton Color="Color.Info" OnClick="@(() => GotoEditPage(context))" EndIcon="@Icons.Material.Outlined.Edit" Style="color:#714727;"></MudButton></MudTd>
            <MudTd DataLabel="מחיקה"><MudButton Color="Color.Info" OnClick="@(() => DeleteGame(context, MyDIalogDeleteGame))" EndIcon="@Icons.Material.Outlined.Delete" Style="color:#714727;" ></MudButton></MudTd>
            @if (context.GameQuestions.Count >= 10) //תנאי שקשור לכפתור פרסום משחק
            {
                <MudTd DataLabel="פרסום">
                    <MudCheckBox CheckedChanged="@((bool newState) => PublishGame(context, MyDialogPublish))" Checked="@context.IsPublish" Color="Color.Primary"></MudCheckBox>
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="פרסום">
                    <MudTooltip Text="המשחק לא עומד בתנאי הפרסום, לפחות 10 שאלות">
                        <MudCheckBox CheckedChanged="@((bool newState) => PublishGame(context, MyDialogPublish))" Checked="@context.IsPublish" Disabled="true" Color="Color.Primary"></MudCheckBox>
                    </MudTooltip>
                </MudTd>
            }
        </RowTemplate>
    </MudTable>
    <p>@msg</p>
</div>




@code {

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    async Task OpenDialogSettings(int gameID, DialogOptions options) //פופאפ לשינוי הגדרות משחק
    {
        Game GametoUpdateinDialog = CurrentUser.UserGames.FirstOrDefault(q => q.ID == gameID);//שולפת את המשחק מתוך הטבלה

        Game game = new Game();
        game.GameName = GametoUpdateinDialog.GameName;
        game.QTimeLimit = GametoUpdateinDialog.QTimeLimit;

        var parameters = new DialogParameters();

        // GametoUpdate = game;

        parameters.Add("GameFromPage", GametoUpdateinDialog); //שולח את המשחק

        var dialog = DialogService.Show<SttingGameDialog>("הגדרות משחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            //המשתמש לחץ על שמירת שינויים אז נעדכן את הבסיס נתונים

            Console.WriteLine("יש לשמור שינויים");

            var GetResponse = await Http.GetAsync("api/Games/" + userId);
            if (GetResponse.IsSuccessStatusCode == true)
            {
                var postRespone = await Http.PostAsJsonAsync("api/Games/Update/GameUpdate", GametoUpdateinDialog);

                if (postRespone.IsSuccessStatusCode == true)
                {
                    GametoUpdateinDialog = postRespone.Content.ReadFromJsonAsync<Game>().Result;
                    GametoUpdateinDialog = new Game();
                }
                else
                {
                    string error = GetResponse.Content.ReadAsStringAsync().Result;
                    if (error == "user not logged in" || error == "Empty Session")
                    {
                        Console.WriteLine(error);
                        nav.NavigateTo("./");
                    }
                    else
                    {
                        Console.WriteLine(error);

                    }

                    Console.WriteLine(error);
                }
            }
        }
        else
        {
            GametoUpdateinDialog.GameName = game.GameName;
            GametoUpdateinDialog.QTimeLimit = game.QTimeLimit;

            Console.WriteLine(" לא בוצעו שינויים החלון נסגר");
        }
        GametoUpdateinDialog = new Game(); //איפוס המופע
        game = new Game(); //איפוע המופע המקומי
    }

    DialogOptions MyDialog = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    async Task OpenDialogCreateGAme(int userId, DialogOptions options) //פופאפ ליצירת משחק חדש
    {
        var parameters = new DialogParameters();

        // GametoUpdate = game;

        parameters.Add("userId", userId); //שולח המשתמש

        var dialog = DialogService.Show<CreateGameDialog>("יצירת משחק חדש", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            Console.WriteLine("התבצעו שינויים");
            await RefreshTable(); //רענון הטבלה

        }
        else
        {
            Console.WriteLine("לא היו שינויים סגירת חלון ");

        }

        newGame = new Game(); // המופעאיפוס


    }

    [Parameter]
    public int userId { get; set; }


    //משתנה לשינוי מצב הכפתור של צור משחק
    bool IsButtonEabled = true;

    // חיווי למשתמש
    string msg = "";

    //יצירת מופע חדש של יוזר
    User CurrentUser = new User();

    //יצירת מופע חדש של משחק
    Game newGame = new Game();

    Game GametoUpdate = new Game();

    int CurrentUseUserGames = 0;

    //קריאה למאגר נותנים הצגת המשחקים של היוזר
    protected async override Task OnInitializedAsync()
    {
        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
            CurrentUseUserGames = CurrentUser.UserGames.Count; //משתנה לספירת המשחקים של המשתמש הנוכחי
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not logged in" || error == "Empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                Console.WriteLine("התרחשה תקלת שרת");
                nav.NavigateTo("./");
            }
        }

        if (CurrentUser.UserGames.Count == 0)
        {
            msg= "רשימת המשחקים ריקה, לחצו על כפתור יצירת משחק כדי להוסיף משחק לרשימה";
        }
        else
        {
            msg="";
        }


    }


    DialogOptions MyDialogPublish = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    //קריאה לקונטרולר לעדכון סטטוס המשחק האם פורסם

    async Task PublishGame(Game selectedGame, DialogOptions options)

    {
        var parameters = new DialogParameters();

        parameters.Add("GameFromPage", selectedGame); //שולח מופע של משחק

        var dialog = DialogService.Show<GameIsPublishedDialog>("פרסום המשחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            Console.WriteLine("התבצעו שינויים");
        }
        else
        {
            Console.WriteLine("לא היו שינויים סגירת חלון ");
            selectedGame.IsPublish = selectedGame.IsPublish;
        }

        selectedGame.IsPublish = !selectedGame.IsPublish;

        var postRespone = await Http.PostAsJsonAsync("api/Games/Update/Publish", selectedGame);
        if (postRespone.IsSuccessStatusCode == true)
        {
            var GetResponse = await Http.GetAsync("api/Games/" + userId);
            if (GetResponse.IsSuccessStatusCode == true)
            {

                Game updateGame = postRespone.Content.ReadFromJsonAsync<Game>().Result;

                selectedGame = new Game();
            }

            else
            {
                Console.WriteLine("משחק לא פורסם");


            }
        } else
        {
            string error = postRespone.Content.ReadAsStringAsync().Result;

            if (error == "user not logged in" || error == "Empty Session")
            {
                Console.WriteLine(error);

                nav.NavigateTo("./");
            }
            else
            {
                Console.WriteLine(error);
            }
        }



    }





    //קריאה לרענון הטבלה
    async Task RefreshTable()
    {

        var GetResponse = await Http.GetAsync("api/Games/" + userId);
        if (GetResponse.IsSuccessStatusCode == true)
        {
            CurrentUser = GetResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        else
        {
            string error = GetResponse.Content.ReadAsStringAsync().Result;
            if (error == "user not logged in" || error == "Empty Session")
            {
                nav.NavigateTo("./");
            }
            else
            {
                Console.WriteLine("התרחשה תקלת שרת");
            }
        }

        if (CurrentUser.UserGames.Count != 0)
        {
            msg = "";
        }
        else
        {
            msg = "רשימת המשחקים ריקה, לחצו על כפתור יצירת משחק כדי להוסיף משחק לרשימה";

        }


    }


    DialogOptions MyDIalogDeleteGame = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    List<string> DeletedImages = new List<string>(); //רשימת תמונות למחיקה


    protected async Task DeleteGame(Game CurrentGame, DialogOptions options) //שיטה למחיקת משחק

    {

        var parameters = new DialogParameters();

        parameters.Add("GameFromPage", CurrentGame); //שולח מופע של משחק

        var dialog = DialogService.Show<DeleteGameDialog>("מחיקת המשחק", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            Console.WriteLine("התבצעו שינויים");

            var getResponse = await Http.GetAsync("api/Games/bygameID/" + CurrentGame.ID + "/" + CurrentGame.UserID); // שליפת תוכן המשחק כולל מסיחים ושאלות
            if (getResponse.IsSuccessStatusCode == true)

            {

                // הכלה של פרטי הקריאה מהדטה בייס למופע של המשחק בעמוד זה
                CurrentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            }
            foreach (Question q in CurrentGame.GameQuestions)
            {
                if (q.QuestionImage != null)
                {
                    DeletedImages.Add(q.QuestionImage); //הוספה לרשימת המחיקה                       

                }
                foreach (Distractor d in q.QuestionDistractors)
                {
                    if (d.IsImage == true)
                    {

                        DeletedImages.Add(d.DistractorContent); //הוספה לרשימת המחיקה                       
                    }

                }

            }
            Console.WriteLine("DeletedImages.Count " + DeletedImages.Count);

            var saveResponse = await Http.PostAsJsonAsync("api/Games/deleteImages/" + userId, DeletedImages);

            //פעולת המחיקה
            if (saveResponse.IsSuccessStatusCode == true)
            {
                Console.WriteLine(" תמונות נמחקו ");
            }

            DeletedImages = new List<string>(); //איפוס


            var deleteResponse = await Http.DeleteAsync("api/Games/" + CurrentGame.UserID.ToString() + "/" + CurrentGame.ID); //הנתיב של הקונטרולר מוצא לנו את המשחק שהמספר המזהה שלו נבחר או הוקלד

            if (deleteResponse.IsSuccessStatusCode == true) //בדיקת תקינות
            {
                var GetResponse = await Http.GetAsync("api/Games/" + userId);
                if (GetResponse.IsSuccessStatusCode == true)
                {


                    CurrentUser.UserGames.Remove(CurrentGame);  //להסיר את המשחק

                    await RefreshTable(); // ריענון הטבלה

                    CurrentGame = new Game();// איפוס המופע כדי להכינו לקבלת מידע חדש
                    Console.WriteLine("אחרי המחיקה");

                    CurrentUseUserGames = CurrentUser.UserGames.Count;

                }
                else
                {
                    Console.WriteLine("לא נמחק") ;
                }
            } else
            {
                string error = getResponse.Content.ReadAsStringAsync().Result;
                if (error == "user not logged in" || error == "Empty Session")
                {
                    Console.WriteLine(error);

                }


            }
        }
        else
        {
            Console.WriteLine("לא היו שינויים סגירת חלון ");

        }

    }

    //מעבר לעמוד עריכת משחק דרך כפתור עריכה
    protected async Task GotoEditPage(Game Game)
    {
        var gameId = Game.ID;
        var getResponse = await Http.GetAsync("api/Games/bygameID/" + gameId + "/" + userId);

        if (getResponse.IsSuccessStatusCode)
        {
            Game gametoEditPage = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            nav.NavigateTo("./EditQuestionsPage/" + gametoEditPage.ID + "/" + gametoEditPage.UserID);
        }
        else
        {
            Console.WriteLine("התרחשה תקלת שרת");


        }


    }


    DialogOptions MyDialogPopup = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, DisableBackdropClick = true };


    void GotoHowtoDialog(DialogOptions options) // פופאפ לתפריט ניווט איך משחקים
    {
        Console.WriteLine("נכנס לפונקציה");
        Console.WriteLine("options " + options);
        var dialog = DialogService.Show<HowtoplayDialog>(" ", options);

        //var result = await dialog.Result;
    }

    void GotoOdot(DialogOptions options) //פופאפ לאודות
    {
        Console.WriteLine("נכנס לפונקציה");
        Console.WriteLine("options " + options);
        var dialog = DialogService.Show<Odot>(" ", options);

        //var result = await dialog.Result;
    }

}


